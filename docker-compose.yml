networks:
  cspmexa_net:
    driver: bridge

volumes:
  postgres_auth_data:
  vault_secrets_auth:
  vault_secrets_collector:
  vault_secrets_notification:
  vault_secrets_api_gateway:
  # Para desenvolvimento, podemos persistir node_modules do frontend se não quisermos reconstruir
  # frontend_node_modules:

services:
  # --- Banco de Dados ---
  postgres_auth_db:
    image: postgres:13-alpine
    container_name: cspmexa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${AUTH_DB_USER:-cspmexa_user}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-changeme}
      POSTGRES_DB: ${AUTH_DB_NAME:-cspmexa_db}
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    ports: []
    networks:
      - cspmexa_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-cspmexa_user} -d $${POSTGRES_DB:-cspmexa_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Serviços de Backend ---
  auth_service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    container_name: cspmexa-auth-service
    restart: unless-stopped
    command: python /app/app/main.py
    environment:
      - DATABASE_URL=postgresql://${AUTH_DB_USER:-cspmexa_user}:${AUTH_DB_PASSWORD:-changeme}@postgres_auth_db:5432/${AUTH_DB_NAME:-cspmexa_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?err_jwt_secret_missing}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=http://localhost:${API_GATEWAY_PORT:-8050}/api/v1/auth/google/callback
      - FRONTEND_URL_AUTH_CALLBACK=http://localhost:${FRONTEND_PORT:-3000}/auth/callback
      - TOTP_ISSUER_NAME=${TOTP_ISSUER_NAME:-CSPMEXA}
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - AUDIT_SERVICE_URL=http://audit_service:8005
    volumes:
      - ./backend/auth_service:/app
    networks:
      - cspmexa_net
    depends_on:
      postgres_auth_db:
        condition: service_healthy

  collector_service:
    build:
      context: ./backend/collector_service
      dockerfile: Dockerfile
    container_name: cspmexa-collector-service
    restart: unless-stopped
    command: >
      sh -c "
        while [ ! -f /vault/secrets/collector-secrets.env ]; do
          echo 'Aguardando segredos do Vault...'
          sleep 2
        done
        . /vault/secrets/collector-secrets.env && python /app/app/main.py
      "
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/secrets/gcp-credentials.json
      - GOOGLE_SERVICE_ACCOUNT_KEY_PATH=/app/secrets/gws-sa-key.json
      - GOOGLE_WORKSPACE_CUSTOMER_ID=${GOOGLE_WORKSPACE_CUSTOMER_ID:-my_customer}
      - M365_HTTP_CLIENT_TIMEOUT=${M365_HTTP_CLIENT_TIMEOUT:-30}
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - VAULT_ADDR=http://vault:8200
    volumes:
      - ./backend/collector_service:/app
      - vault_secrets_collector:/vault/secrets
      # Montar arquivos de credenciais JSON ainda pode ser necessário se não forem gerenciados pelo Vault
      - ${GCP_CREDENTIALS_PATH_HOST:-./secrets/gcp-credentials.json}:/app/secrets/gcp-credentials.json:ro
      - ${GWS_SA_KEY_PATH_HOST:-./secrets/gws-sa-key.json}:/app/secrets/gws-sa-key.json:ro
    networks:
      - cspmexa_net
    depends_on:
      - vault_agent_collector

  vault_agent_collector:
    image: hashicorp/vault:1.15
    container_name: cspmexa-vault-agent-collector
    volumes:
      - vault_secrets_collector:/vault/secrets
    entrypoint: |
      sh -c '
      vault agent -config=- <<EOF
      pid_file = "/tmp/pidfile"
      auto_auth {
        method "approle" {
          mount_path = "auth/approle"
          config = {
            role_id_file_path = "/vault/secrets/collector_role_id"
            secret_id_file_path = "/vault/secrets/collector_secret_id"
            remove_secret_id_file_after_read = true
          }
        }
      }
      template {
        source      = "/vault/templates/collector-secrets.ctmpl"
        destination = "/vault/secrets/collector-secrets.env"
        perms       = "0400"
        command     = "touch /vault/secrets/template_rendered"
      }
      vault {
        address = "http://vault:8200"
      }
      EOF
      '
    depends_on:
      - vault-setup

  policy_engine_service:
    build:
      context: ./backend/policy_engine_service
      dockerfile: Dockerfile
    container_name: cspmexa-policy-engine-service
    restart: unless-stopped
    command: python /app/app/main.py
    environment:
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - NOTIFICATION_SERVICE_URL=http://notification_service:8003/api/v1
      - AUDIT_SERVICE_URL=http://audit_service:8005
      # Conexão com o Vault
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
    volumes:
      - ./backend/policy_engine_service:/app
    networks:
      - cspmexa_net
    depends_on:
      postgres_auth_db:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully

  notification_service:
    build:
      context: ./backend/notification_service
      dockerfile: Dockerfile
    container_name: cspmexa-notification-service
    restart: unless-stopped
    command: >
      sh -c "
        while [ ! -f /vault/secrets/notification-secrets.env ]; do
          echo 'Aguardando segredos do Vault...'
          sleep 2
        done
        . /vault/secrets/notification-secrets.env && python /app/app/main.py
      "
    environment:
      # Configs não-secretas
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RELOAD_UVICORN=${DEBUG_MODE:-false}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME:-CSPMEXA Notification}
      # Conexão com o Vault
      - VAULT_ADDR=http://vault:8200
    volumes:
      - ./backend/notification_service/app:/app/app
      - vault_secrets_notification:/vault/secrets
    networks:
      - cspmexa_net
    depends_on:
      vault_agent_notification:
        condition: service_started

  vault_agent_notification:
    image: hashicorp/vault:1.15
    container_name: cspmexa-vault-agent-notification
    volumes:
      - vault_secrets_notification:/vault/secrets
    entrypoint: |
      sh -c '
      vault agent -config=- <<EOF
      pid_file = "/tmp/pidfile"
      auto_auth {
        method "approle" {
          mount_path = "auth/approle"
          config = {
            role_id_file_path = "/vault/secrets/notification_role_id"
            secret_id_file_path = "/vault/secrets/notification_secret_id"
            remove_secret_id_file_after_read = true
          }
        }
      }
      template {
        source      = "/vault/templates/notification-secrets.ctmpl"
        destination = "/vault/secrets/notification-secrets.env"
        perms       = "0400"
        command     = "touch /vault/secrets/template_rendered"
      }
      vault {
        address = "http://vault:8200"
      }
      EOF
      '
    depends_on:
      - vault-setup

  audit_service:
    build:
      context: ./backend/audit_service
      dockerfile: Dockerfile
    container_name: cspmexa-audit-service
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8005 --reload
    volumes:
      - ./backend/audit_service/app:/app/app
    networks:
      - cspmexa_net

  api_gateway_service:
    build:
      context: ./backend/api_gateway_service
      dockerfile: Dockerfile
    container_name: cspmexa-api-gateway-service
    restart: unless-stopped
    command: >
      sh -c "
        # Este serviço pode não precisar de segredos agora, mas o padrão é mantido
        # para consistência. O arquivo de segredos pode estar vazio.
        touch /vault/secrets/api-gateway-secrets.env
        . /vault/secrets/api-gateway-secrets.env && python /app/app/main.py
      "
    environment:
      # URLs dos serviços downstream são agora definidas no config.py, mas podem ser sobrescritas aqui se necessário.
      - HTTP_CLIENT_TIMEOUT=${HTTP_CLIENT_TIMEOUT:-60}
      - DEBUG_MODE=${DEBUG_MODE:-false}
      # Conexão com o Vault
      - VAULT_ADDR=http://vault:8200
    volumes:
      - ./backend/api_gateway_service:/app
      - vault_secrets_api_gateway:/vault/secrets
    networks:
      - cspmexa_net
    depends_on:
      - auth_service
      - collector_service
      - policy_engine_service
      - notification_service
      - vault_agent_api_gateway

  vault_agent_api_gateway:
    image: hashicorp/vault:1.15
    container_name: cspmexa-vault-agent-api-gateway
    volumes:
      - vault_secrets_api_gateway:/vault/secrets
    entrypoint: |
      sh -c '
      vault agent -config=- <<EOF
      pid_file = "/tmp/pidfile"
      auto_auth {
        method "approle" {
          mount_path = "auth/approle"
          config = {
            role_id_file_path = "/vault/secrets/api_gateway_role_id"
            secret_id_file_path = "/vault/secrets/api_gateway_secret_id"
            remove_secret_id_file_after_read = true
          }
        }
      }
      template {
        # Template vazio, pois nenhum segredo é necessário no momento
        source      = "/vault/templates/api-gateway-secrets.ctmpl"
        destination = "/vault/secrets/api-gateway-secrets.env"
        perms       = "0400"
        command     = "touch /vault/secrets/template_rendered"
      }
      vault {
        address = "http://vault:8200"
      }
      EOF
      '
    depends_on:
      - vault-setup

  # --- Frontend Build ---
  frontend_build:
    build:
      context: ./frontend/webapp
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: /api/v1
    volumes:
      - ./frontend/webapp/dist:/app/dist

  # --- Nginx Reverse Proxy ---
  nginx:
    image: nginx:latest
    container_name: cspmexa-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./frontend/webapp/dist:/usr/share/nginx/html:ro
    networks:
      - cspmexa_net
    depends_on:
      - api_gateway_service
      - frontend_build

  # --- Serviço de Instalação (Wizard) ---
  # Este serviço não tem perfil, então ele roda por padrão com 'docker compose up'
  installer:
    build:
      context: ./installer
      dockerfile: Dockerfile
    container_name: cspmexa-installer
    ports:
      - "8080:8080" # Porta para o assistente de instalação web
    volumes:
      - .:/app/config # Monta a raiz do projeto para que o instalador possa criar o .env
      # Montar o socket do Docker para permitir que o instalador execute comandos docker
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - cspmexa_net

  # --- Vault para Gestão de Segredos ---
  vault:
    image: hashicorp/vault:1.15
    container_name: cspmexa-vault
    ports:
      - "8200:8200"
    environment:
      # Roda o Vault em modo de desenvolvimento.
      # IMPORTANTE: NÃO USE EM PRODUÇÃO. O token raiz é 'root' e os dados são em memória.
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK # Evita que a memória do Vault seja trocada para o disco
    networks:
      - cspmexa_net

  # --- Serviço para configurar o Vault na primeira inicialização ---
  vault-setup:
    build:
      context: ./vault
      dockerfile: Dockerfile
    container_name: cspmexa-vault-setup
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root # Token raiz de desenvolvimento
    depends_on:
      vault:
        condition: service_started # Espera o serviço do vault iniciar
    networks:
      - cspmexa_net
    # Este serviço só precisa rodar uma vez. Em um ambiente real,
    # isso seria parte de um pipeline de CI/CD ou um processo de provisionamento.
    # Para o compose, podemos deixá-lo rodar e sair.
    # Se o script de setup for idempotente, não há problema em rodá-lo novamente.
