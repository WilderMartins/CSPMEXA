name: Basic CI

on:
  push:
    branches: [ main ] # Ajustar para o nome da sua branch principal se for diferente
  pull_request:
    branches: [ main ] # Ajustar para o nome da sua branch principal

jobs:
  lint-backend:
    name: Lint Backend (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Python Linters
        run: pip install flake8 black
      - name: Run flake8
        # Idealmente, cada microsserviço teria seu próprio linting step
        # ou um script na raiz para lintar todos. Por simplicidade no MVP:
        run: flake8 backend/
      - name: Check black formatting
        run: black --check backend/

  lint-frontend:
    name: Lint Frontend (React/TS)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/webapp
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Usar a mesma versão do Dockerfile do frontend
          cache: 'npm'
          cache-dependency-path: frontend/webapp/package-lock.json
      - name: Install frontend dependencies
        run: npm ci # Usar ci para instalações mais rápidas e consistentes em CI
      - name: Run ESLint
        run: npm run lint

  # --- Testes de Backend ---

  test-auth-service:
    name: Test Auth Service (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/auth_service
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements-dev.txt
      - name: Run Pytest for Auth Service
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/backend
          coverage run -m pytest tests && coverage report

  test-collector-service:
    name: Test Collector Service (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/collector_service
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements-dev.txt
      - name: Run Pytest for Collector Service
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/backend
          coverage run -m pytest tests && coverage report

  test-policy-engine-service:
    name: Test Policy Engine Service (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/policy_engine_service
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements-dev.txt
      - name: Run Pytest for Policy Engine Service
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/backend
          coverage run -m pytest tests && coverage report

  test-api-gateway-service:
    name: Test API Gateway Service (Python Integration)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/api_gateway_service
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements-dev.txt
      - name: Run Pytest for API Gateway Service
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/backend
          coverage run -m pytest tests && coverage report

  # --- Testes de Frontend ---
  test-frontend:
    name: Test Frontend (React/TS with Jest)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/webapp
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/webapp/package-lock.json
      - name: Install frontend dependencies
        run: npm ci
      - name: Run frontend tests
        # O projeto está configurado com Jest. O comando `npm test` executa os testes.
        run: npm test

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/webapp
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/webapp/package-lock.json
      - name: Install frontend dependencies
        run: npm ci
      - name: Build React App
        run: npm run build

  build-and-push-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    # Este job será executado apenas manualmente ou em um gatilho específico no futuro
    if: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/auth_service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest
      - name: Build and push api-gateway-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/api_gateway_service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway-service:latest
      - name: Build and push collector-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/collector_service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/collector-service:latest
      - name: Build and push policy-engine-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/policy_engine_service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/policy-engine-service:latest
      - name: Build and push notification-service
        uses: docker/build-push-action@v5
        with:
          context: ./backend/notification_service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:latest
