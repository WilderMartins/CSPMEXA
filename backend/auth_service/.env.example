# backend/auth_service/.env.example

# Database Configuration
# These variables are used by the auth_service to connect to its PostgreSQL database.
# Ensure the `postgres_auth` service in docker-compose.yml uses these credentials if you change them.
AUTH_DB_USER=user
AUTH_DB_PASSWORD=password
AUTH_DB_NAME=authdb_mvp
AUTH_DB_HOST=postgres_auth # Service name in docker-compose
AUTH_DB_PORT=5432
DATABASE_URL=postgresql://${AUTH_DB_USER}:${AUTH_DB_PASSWORD}@${AUTH_DB_HOST}:${AUTH_DB_PORT}/${AUTH_DB_NAME}

# JWT Configuration
# JWT_SECRET_KEY: A strong, random string used to sign JWTs. Keep this secret!
# ACCESS_TOKEN_EXPIRE_MINUTES: How long an access token is valid (in minutes).
JWT_SECRET_KEY="YOUR_VERY_STRONG_AND_UNIQUE_JWT_SECRET_KEY_HERE"
ACCESS_TOKEN_EXPIRE_MINUTES=1440 # Default is 1 day (60 * 24)

# Google OAuth Configuration
# Obtain these credentials from the Google Cloud Console for your OAuth 2.0 client.
# GOOGLE_REDIRECT_URI: The URI in *this* auth-service that Google will redirect to after user authentication.
# It must match one of the "Authorized redirect URIs" in your Google Cloud Console OAuth client settings.
# The default in config.py is http://localhost:8000/api/v1/auth/google/callback
GOOGLE_CLIENT_ID="YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="YOUR_GOOGLE_CLIENT_SECRET"
GOOGLE_REDIRECT_URI="http://localhost:8000/api/v1/auth/google/callback"

# Frontend Redirect URLs
# These are URLs on your frontend application that the auth_service will redirect the user to.
FRONTEND_URL_AUTH_CALLBACK="http://localhost:3000/auth/callback"
FRONTEND_URL_MFA_REQUIRED="http://localhost:3000/mfa-login"
# FRONTEND_URL_MFA_SETUP="http://localhost:3000/mfa-setup" # Already has a default in config.py

# TOTP Configuration
# TOTP_ISSUER_NAME: The name displayed in the authenticator app (e.g., Google Authenticator).
TOTP_ISSUER_NAME="CSPMEXA" # Default is CSPMEXA

# General Settings (rarely changed from defaults in config.py)
# PROJECT_NAME="AuthService"
# API_V1_STR="/api/v1"
