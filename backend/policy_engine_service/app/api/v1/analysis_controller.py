from fastapi import APIRouter, HTTPException, Body, Depends
from sqlalchemy.orm import Session
from typing import Dict, Any, List
import logging

from app.db.session import get_db
from app.crud.crud_alert import alert_crud
from app.engine.core_engine import policy_engine # Importa a instância do PolicyEngine
from app.schemas.input_data_schema import AnalysisRequest
from app.schemas.alert_schema import AlertCreate, AlertSchema
from app.core.security import verify_internal_api_key
# AnalysisResponse e ProviderAnalysisResult podem ser usados se a resposta for mais estruturada
# from app.schemas.analysis_schema import AnalysisResponse, ProviderAnalysisResult

logger = logging.getLogger(__name__)
router = APIRouter(dependencies=[Depends(verify_internal_api_key)])

@router.post("/analyze", response_model=List[AlertSchema]) # Retorna uma lista de alertas persistidos
async def analyze_resources_and_persist_alerts(
    analysis_request: AnalysisRequest = Body(...),
    db: Session = Depends(get_db)
):
    """
    Recebe dados de configuração de recursos, aplica políticas para gerar dados de alerta,
    cria/atualiza alertas no banco de dados e retorna os alertas processados.
    """
    logger.info(f"Received analysis request for provider: {analysis_request.provider}, service: {analysis_request.service}, account: {analysis_request.account_id or 'N/A'}")

    if not analysis_request.data:
        logger.info(f"No data provided for analysis request for service: {analysis_request.service}. Returning empty list.")
        return []

    try:
        raw_alert_data_list: List[Dict[str, Any]] = await policy_engine.analyze(analysis_request)

        persisted_alerts_schemas: List[AlertSchema] = []
        if not raw_alert_data_list:
            logger.info(f"No alert data generated by policy engine for {analysis_request.provider}/{analysis_request.service}.")
            return []

        for alert_data_dict in raw_alert_data_list:
            try:
                alert_data_dict.setdefault("provider", analysis_request.provider.lower())
                if analysis_request.account_id:
                    alert_data_dict.setdefault("account_id", analysis_request.account_id)

                alert_to_create = AlertCreate(**alert_data_dict)

                # alert_crud.create_alert agora é create_alert_and_notify (async)
                created_alert_model = await alert_crud.create_alert(db=db, alert_in=alert_to_create)

                persisted_alerts_schemas.append(AlertSchema.from_orm(created_alert_model))
            except Exception as e:
                logger.error(f"Error processing, persisting, or notifying for one alert for {analysis_request.provider}/{analysis_request.service}: {e} - Data: {alert_data_dict}", exc_info=True)

        logger.info(f"Analysis, persistence, and notification triggering for {analysis_request.provider}/{analysis_request.service} (Account: {analysis_request.account_id or 'N/A'}) completed. Processed {len(persisted_alerts_schemas)} alerts.")
        return persisted_alerts_schemas

    except Exception as e:
        logger.exception(f"Critical error during resource analysis, persistence or notification for service {analysis_request.service}")
        raise HTTPException(
            status_code=500, detail=f"Error during resource analysis for {analysis_request.service}: {str(e)}"
        )
