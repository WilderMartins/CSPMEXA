# Servidor HTTP: Redireciona todo o tráfego para HTTPS
server {
    listen 80;
    server_name _; # Captura todos os hostnames

    # Retorna um redirecionamento permanente para a versão HTTPS
    return 301 https://$host$request_uri;
}

# Servidor HTTPS: Ponto de entrada principal
server {
    listen 443 ssl;
    server_name localhost; # Ou seu domínio em produção

    # --- Configuração SSL ---
    # Caminhos para os certificados. Estes serão gerados no Dockerfile.
    # Para produção, substitua por certificados válidos (ex: Let's Encrypt).
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    # Melhora a segurança do SSL
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    # --- Configuração do Site ---
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Lidar com client-side routing do React Router
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy reverso para o backend API Gateway
    # Todas as chamadas para /api/v1/* serão encaminhadas para o api_gateway_service
    location /api/v1/ {
        # O nome 'api_gateway_service' é resolvido pela rede interna do Docker.
        # A porta '8050' é a porta interna do container do api_gateway.
        proxy_pass http://api_gateway_service:8050;

        # Cabeçalhos importantes para o backend receber a informação correta
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Informa ao backend que a conexão original foi feita via HTTPS
        proxy_set_header X-Forwarded-Proto $scheme;

        # Configurações para WebSockets, se necessário no futuro
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

    # Opcional: Configurações de cache para assets estáticos
    location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
        expires 1y;
        add_header Cache-Control "public";
        try_files $uri =404;
    }
}
