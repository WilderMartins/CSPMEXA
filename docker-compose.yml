version: '3.8'

networks:
  cspmexa_net:
    driver: bridge

volumes:
  postgres_auth_data:
  # Para desenvolvimento, podemos persistir node_modules do frontend se não quisermos reconstruir
  # frontend_node_modules:

services:
  # --- Banco de Dados ---
  postgres_auth_db:
    profiles: ["app"]
    image: postgres:13-alpine
    container_name: cspmexa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${AUTH_DB_USER:-cspmexa_user}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-changeme}
      POSTGRES_DB: ${AUTH_DB_NAME:-cspmexa_db}
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    ports:
      - "${AUTH_DB_EXPOSED_PORT:-5433}:5432"
    networks:
      - cspmexa_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-cspmexa_user} -d $${POSTGRES_DB:-cspmexa_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Serviços de Backend ---
  auth_service:
    profiles: ["app"]
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    container_name: cspmexa-auth-service
    restart: unless-stopped
    command: python /app/app/main.py # main.py lida com reload via DEBUG_MODE
    environment:
      - DATABASE_URL=postgresql://${AUTH_DB_USER:-cspmexa_user}:${AUTH_DB_PASSWORD:-changeme}@postgres_auth_db:5432/${AUTH_DB_NAME:-cspmexa_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?err_jwt_secret_missing}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=http://localhost:${API_GATEWAY_PORT:-8050}/api/v1/auth/google/callback
      - FRONTEND_URL_AUTH_CALLBACK=http://localhost:${FRONTEND_PORT:-3000}/auth/callback
      - TOTP_ISSUER_NAME=${TOTP_ISSUER_NAME:-CSPMEXA}
      - DEBUG_MODE=${DEBUG_MODE:-false} # Para hot-reloading
    volumes:
      - ./backend/auth_service:/app # Monta o código para hot-reloading
    # As portas não são mais expostas ao host, a comunicação é interna na rede Docker
    networks:
      - cspmexa_net
    depends_on:
      postgres_auth_db:
        condition: service_healthy

  collector_service:
    profiles: ["app"]
    build:
      context: ./backend/collector_service
      dockerfile: Dockerfile
    container_name: cspmexa-collector-service
    restart: unless-stopped
    command: python /app/app/main.py
    environment:
      - AWS_REGION_NAME=${AWS_REGION_NAME:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/secrets/gcp-credentials.json
      - GOOGLE_SERVICE_ACCOUNT_KEY_PATH=/app/secrets/gws-sa-key.json
      - GOOGLE_WORKSPACE_DELEGATED_ADMIN_EMAIL=${GOOGLE_WORKSPACE_DELEGATED_ADMIN_EMAIL}
      - GOOGLE_WORKSPACE_CUSTOMER_ID=${GOOGLE_WORKSPACE_CUSTOMER_ID:-my_customer}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - HUAWEICLOUD_SDK_AK=${HUAWEICLOUD_SDK_AK}
      - HUAWEICLOUD_SDK_SK=${HUAWEICLOUD_SDK_SK}
      - HUAWEICLOUD_SDK_PROJECT_ID=${HUAWEICLOUD_SDK_PROJECT_ID}
      - HUAWEICLOUD_SDK_DOMAIN_ID=${HUAWEICLOUD_SDK_DOMAIN_ID}
      # Microsoft 365
      - M365_CLIENT_ID=${M365_CLIENT_ID}
      - M365_CLIENT_SECRET=${M365_CLIENT_SECRET}
      - M365_TENANT_ID=${M365_TENANT_ID}
      - M365_HTTP_CLIENT_TIMEOUT=${M365_HTTP_CLIENT_TIMEOUT:-30}
      - DEBUG_MODE=${DEBUG_MODE:-false}
    volumes:
      - ./backend/collector_service:/app
      # Montar arquivos de credenciais do host para o container.
      # O usuário deve criar uma pasta 'secrets' na raiz e colocar os arquivos lá,
      - ${GCP_CREDENTIALS_PATH_HOST:-./secrets/gcp-credentials.json}:/app/secrets/gcp-credentials.json:ro
      - ${GWS_SA_KEY_PATH_HOST:-./secrets/gws-sa-key.json}:/app/secrets/gws-sa-key.json:ro
    networks:
      - cspmexa_net

  policy_engine_service:
    profiles: ["app"]
    build:
      context: ./backend/policy_engine_service
      dockerfile: Dockerfile
    container_name: cspmexa-policy-engine-service
    restart: unless-stopped
    command: python /app/app/main.py
    environment:
      # Aponta para o mesmo DB do auth_service para alertas
      - DATABASE_URL=postgresql://${AUTH_DB_USER:-cspmexa_user}:${AUTH_DB_PASSWORD:-changeme}@postgres_auth_db:5432/${AUTH_DB_NAME:-cspmexa_db}
      - DEBUG_MODE=${DEBUG_MODE:-false}
      # URL para o notification_service, usado pelo policy_engine para enviar notificações
      - NOTIFICATION_SERVICE_URL=http://notification_service:8003/api/v1
    volumes:
      - ./backend/policy_engine_service:/app
    networks:
      - cspmexa_net
    depends_on:
      postgres_auth_db:
        condition: service_healthy

  notification_service:
    profiles: ["app"]
    build:
      context: ./backend/notification_service
      dockerfile: Dockerfile
    container_name: cspmexa-notification-service
    restart: unless-stopped
    command: python /app/app/main.py
    environment:
      - PROJECT_NAME=NotificationService
      - API_V1_STR=/api/v1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RELOAD_UVICORN=${DEBUG_MODE:-false}
      - PORT=8003 # Porta interna do container
      # SMTP settings from root .env file
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TLS=${SMTP_TLS:-true}
      - SMTP_SSL=${SMTP_SSL:-false}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME:-CSPMEXA Notification}
      - DEFAULT_CRITICAL_ALERT_RECIPIENT_EMAIL=${DEFAULT_CRITICAL_ALERT_RECIPIENT_EMAIL}
    volumes:
      - ./backend/notification_service/app:/app/app
    networks:
      - cspmexa_net

  api_gateway_service:
    profiles: ["app"]
    build:
      context: ./backend/api_gateway_service
      dockerfile: Dockerfile
    container_name: cspmexa-api-gateway-service
    restart: unless-stopped
    command: python /app/app/main.py
    environment:
      - AUTH_SERVICE_URL=http://auth_service:8000/api/v1
      - COLLECTOR_SERVICE_URL=http://collector_service:8001/api/v1
      - POLICY_ENGINE_SERVICE_URL=http://policy_engine_service:8002/api/v1
      - NOTIFICATION_SERVICE_URL=http://notification_service:8003/api/v1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?err_jwt_secret_missing_for_gateway}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - HTTP_CLIENT_TIMEOUT=${HTTP_CLIENT_TIMEOUT:-60}
      - DEBUG_MODE=${DEBUG_MODE:-false}
    volumes:
      - ./backend/api_gateway_service:/app
    # A porta do API Gateway não é mais exposta diretamente. O acesso é via Nginx no frontend.
    networks:
      - cspmexa_net
    depends_on:
      - auth_service
      - collector_service
      - policy_engine_service
      - notification_service

  # --- Frontend WebApp (com Reverse Proxy Nginx) ---
  frontend_webapp:
    profiles: ["app"]
    build:
      context: ./frontend/webapp
      dockerfile: Dockerfile
      args:
        # A URL da API agora é um caminho relativo, pois o Nginx serve ambos.
        VITE_API_BASE_URL: /api/v1
    container_name: cspmexa-frontend-webapp
    restart: unless-stopped
    ports:
      # Expõe as portas padrão de HTTP e HTTPS.
      - "80:80"
      - "443:443"
    networks:
      - cspmexa_net
    depends_on:
      - api_gateway_service # Informativo, pois a conexão é do browser do usuário
    # Para desenvolvimento com hot-reload do Vite (requer modificação do Dockerfile do frontend para usar `npm run dev`):
    # command: npm run dev -- --host 0.0.0.0 # Para expor o Vite dev server
    # volumes:
    #   - ./frontend/webapp:/app # Monta todo o código
    #   - /app/node_modules # Volume anônimo para não sobrescrever node_modules do host
    # environment:
    #   - NODE_ENV=development
    #   - VITE_API_BASE_URL=http://localhost:${API_GATEWAY_PORT:-8050}/api/v1 # Para o Vite dev server
    # ports:
    #   - "${FRONTEND_PORT:-3000}:3000" # Porta do Vite dev server

  # --- Serviço de Instalação (Wizard) ---
  # Este serviço não tem perfil, então ele roda por padrão com 'docker compose up'
  installer:
    build:
      context: ./installer
      dockerfile: Dockerfile
    container_name: cspmexa-installer
    ports:
      - "8080:8080" # Porta para o assistente de instalação web
    volumes:
      - .:/app/config # Monta a raiz do projeto para que o instalador possa criar o .env
      # Montar o socket do Docker para permitir que o instalador execute comandos docker
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - cspmexa_net
